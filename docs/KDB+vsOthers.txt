================
 What is kdb+ ?
================

kdb+ is a high-performance column-oriented database designed, developed and marketed by Kx Systems with
in-memory capabilities for storing and processing large amount of time-series data. The most important
feature of kdb+ is that the commonly accessed data is cached into the main memory thereby speeding up
access time manifold in comparison to traditional disk access for data. Financial institutions use kdb+ to
analyze time series data such as stock or commodity exchange data. The database has also been used for
other time-sensitive data applications including energy trading, telecommunications, sensor data, log data,
and machine and network usage monitoring. The enterprise features of kdb+ facilitate collaboration at scale
between stakeholders whilst reducing costs and overheads as well as boosting productivity. kdb+ is ideally
suited for cloud deployment and Platform/Data As A Service type applications. kdb+ can do everything that
is required for an initiative of this wide ranging ambition – data capture, cleansing, storage, logging,
event processing, analytics and the operation and maintenance of real time and historical databases.
With native 64-bit architecture — essential for managing today’s massive data volumes — kdb+ enables
performance to scale linearly: as the number of CPUs increases, built-in multi-core processing and
multi-threading means that applications can take advantage of multiple cores without having to write
special thread-aware code.


============
 Why kdb+ ?
============

The most crucial reasons why kdb+ is used widely in financial sectors, high frequency trading,
time-sensitive data applications are :

a. It's a proprietary software and so highly stable and reliable.

b. It also supports SQL like queries using q-SQL which is a big advantage for the
   non-programmers as they don't need to learn kdb+ and the intricacies of it's internal working.

c. It has an in-memory component called the RDB(real time database) which holds the current day's data.
   The historical data is stored in the historical database(HDB). The in-memory component makes it possible
   for kdb+ to deal with billions of real-time data entries which is the most important factor in financial
   institutions to deal with stock market data, commodity exchange data etc. kdb+ is known for low-latency,
   in-databases analysis, from both a real-time and historical perspective.

d. It also uses the map-reduce like constructs to manage and high performance querying speed of very
   large datasets(HDB) and low-latency.

e. Though it is built in q programming language yet it includes interfaces for all the popular languages
   as in C/C++, Java, C# and Python.

f. Since it is an columnar database(each column of data is stored sequentially in memory) so one of the
   major benefits is that data can be highly compressed which permits the columnar operations like - MIN,
   MAX, COUNT etc. to be performed very rapidly. Also since column oriented DBMS are self indexing, it uses
   less disk space as compared to relational DBMS containing the same data.

g. In addition to providing incredibly fast query response times, in-memory analytics can reduce or
   eliminate the need for data indexing and storing pre-aggregated data in OLAP (Online Analytical
   Processing) cubes or aggregate tables.  This reduces IT costs and allows faster implementation of
   Business Intelligence and analytic applications.

h. It is based on vectors of ordered lists. This ordered concept allows kdb+ to provide unique time-series
   joins that would be be extremely difficult in other variations of SQL which is based on set theory.

i. It has built-in parallelism and compression technique for data.

j. It has support out of the box for HTTP & WebSockets, JSON, in-memory key-value stores, ODBC and JDBC
   facilitate interoperability with applications such as Excel, in-memory time-series databases, APIs
   allowing for the most rigorous compute and integration requirements to major external systems and
   modules.

k. High precision nanosecond timestamps, time ordered querying, uniquely performant aggregation across
   flexibly-defined time buckets, coupled with time-based table joins of unparalleled speed, allows kdb+ to
   stand alone in time-series analytics.

l. It stores database as ordinary native files, so doesn't need any special hardware requirements and
   runs on macOS, Windows, Linux, Solaris and even the standard commodity servers/hardware without
   compromising performance.

m. It is seamlessly scalable upto many petabytes of data in large scale distributed architectures such as
   cluster, grid, cloud computing.

n. The ability of kdb+ to store any size column and any number of columns makes it an ideal solution for
   the large data volumes required.

o. It has an extremely small footprint, which makes installation and maintenance fast and straightforward.

p. It has built-in administrative tools which include web-server, file operations, and communications.

q. Application-level handling of enterprise-level characteristics: Security, high-availability failover,
   transaction logging, and capacity planning enables kdb+ to fit easily with existing operations.

r. Efficient query distribution : With support for parallel access to large partitioned historical
   databases, queries can be farmed out  to multiple cores/machines.

s. It implements a hybrid in-memory/disk architecture that is optimized to use whatever resources
   are available which, in our view is a better solution i.e, main memory for real-time analysis
   and disk for historical data analysis as in stream processing.

t. It's native support for temporal and bi-temporal features is a rare capability amongst all databases.

========================
 How powerful is kdb+ ?
========================

Some of the results of experiments conducted by researchers and analysts are depicted here to bring to
picture the power of kdb+. These performance metrics are tested in commodity hardware unless explicitly
mentioned about the hardware specifications.

a. Single inserts, updates, joins and selects – millions per second per core. Consistent performance with
   10s of billions of inserts per day.

b. Bulk inserts, updates, joins and selects: up to 10s of millions  of  bulk  inserts  per second which
   sums up to Trillions per day.

c. In-memory  table  scans  of unrivalled  speed  measured  in  milliseconds  across trillions of records.

d. Supports thousands of concurrent time series queries involving billions of rows of data.

e. Publish/subscribe  mechanisms  which  can  update  hundreds  of  subscribers or  a messaging bus in
   real-time.

f. Historical databases allow users to access terabytes of records in seconds.

g. Nanosecond timestamps.

h. kdb+ is 40 to 400 times faster than traditional VCF analysis (Genomic Analysis : Variant Calling)
   depending on the nature of the query on a Intel Xeon E5-2670 v2 processor, CPU 8 core with 61 Gigs of
   RAM and 2*800 Gigs of SSD.

i. kdb+ delivers a performance increase of up to 2.8x on the latest Intel® architecture
   (Intel Xeon E7-8890), compared to Intel systems that are a few years old (Intel Xeon E7-4890) which
   reveals the fact the kdb+ and Kx Systems has better support for better and latest hardwares.

===============================================
 Why should I learn q ? Why not SQL for kdb+ ?
===============================================

One of the major concerns for adopting kdb+ is that one needs to learn q programming language to deal with
kdb+ . Since learning a new language has it's own steep-leaning-curve, Kx Systems has built the q language
keeping in mind the similarity with SQL and also extending capabilities of dealing with real-time database.

kdb+ comes with its built-in functional vector processing programming language that is known as q.
It incorporates a superset of standard SQL which is extended for time-series analysis and offers many
advantages over the standard version. Anyone familiar with SQL can learn q in a matter of days and be able
to quickly write her own ad-hoc queries.

Advantages of q :
---------------

a. Minimization of data traffic : Because q can operate on data directly, there is no need to first read
   data, then export to an external routine for analysis. Event processing can be done immediately, as data
   is received.

b. Virtually unlimited scalability : Lists, dictionaries, and tables are primitive data types, and the
   core primitives are designed for database operations — for example, doing arithmetic on tables.
   An operation can work just as easily on a million records, as on a single record.

c. Built-in time data types : Queries are highly optimized for time-series data.

d. Optimized performance : Data attributes such as sorted, parted, grouped, and unique can be applied to
   columns.

e. Query recognizability : q has database queries that are similar to counterparts in SQL, as well as
   functionality that goes far beyond traditional SQL.

f. Immediate feedback : The q interactive environment provides immediate feedback for rapid development.

g. Only a few lines of code : The brevity of data structures is actually one of the attributes that gives
   q its ability to express concisely what would take many lines in other languages.
